---
layout:     post
title:      "JAVA语法笔记---第十二章"
subtitle:   "JAVA语法备查"
date:       2018-10-29

author:     "kikyoar"
header-img: "img/post-bg-Java-version.jpg"
tags:
    - Java
---   

## 第十二章  

**多线程(多线程的引入)**  

- 什么是线程  

	* 线程是程序执行的一条路径, 一个进程中可以包含多条线程
	* 多线程并发执行可以提高程序的效率, 可以同时完成多项工作  

- 多线程的应用场景  

	* 红蜘蛛同时共享屏幕给多个电脑 
	* 迅雷开启多条线程一起下载
	* QQ 同时和多个人一起视频
	* 服务器同时处理多个客户端请求  

**多线程(多线程并行和并发的区别)**  

- 并行就是两个任务同时运行，就是甲任务进行的同时，乙任务也在进行。(需要多核 CPU)  
	* 比如我跟两个网友聊天，左手操作一个电脑跟甲聊，同时右手用另一台电脑跟乙聊天，这就叫并行 
- 并发是指两个任务都请求运行，而处理器只能按受一个任务，就把这两个任务安排轮流进行，由于时间间隔较短，使人感觉两个任务都在运行  
	* 如果用一台电脑我先给甲发个消息，然后立刻再给乙发消息，然后再跟甲聊，再跟乙聊。这就叫并发  

**多线程(Java 程序运行原理和 JVM 的启动是多线程的吗)**   

- Java 程序运行原理  

	- Java 命令会启动 java 虚拟机，启动 JVM，等于启动了一个应用程序，也就是启动了一个进程。该进程会自动启动一个 “主线程” ，然后主线程去调用某个类的 main 方法  

- JVM 的启动是多线程的吗  

	-  JVM 启动至少启动了垃圾回收线程和主线程，所以是多线程的  

一个进程中至少有一个线程
开启多个线程是为了运行多部分代码
每一个线程都有自己运行的内容，这个内容可以称为线程要执行的任务

**多线程(多线程程序实现的方式 1)**  

- 继承 Thread  

	- 定义一个类继承Thread类
	- 覆盖Thread类中的run方法
	- 直接创建Thread类的子类创建线程
	- 调用start方法开启线程并调用线程的任务run方法执行  

			//1.定义类继承
			class MyThread extends Thread
			{
			    //2.重写run方法
			    public void run()
			    {
			        //3.将要执行的代码，写入run方法中
			        for (int x = 0;x<3000;x++)
			        {
			            System.out.println("aaaaaaaaaaaaaaaaa");
			        }
			    }
			}
			
			
			public class TestThreadDemo1 {
			    public static void main(String[] args) {
			
			        MyThread t = new MyThread();//4.创建自定义类的对象
			        t.start();//开启线程
			        for (int x= 0;x<3000;x++)
			        {
			            System.out.println("bb");
			        }
			    }
			}  
			
**多线程(多线程程序实现的方式 2)**   

- 实现 Runnable

    - 定义类实现Runnable接口
    - 覆盖接口中的run方法，将线程的任务代码封装到run方法中
    - 通过Thread类创建线程对象，并将Runnable接口的子类对象作为构造函数的参数进行传递（因为线程的任务都封装在Runnable接口子类对象的run方法中，所以要在线程对象创建时就必须明确要运行的任务）
    - 调用线程对象的start方法开启线程  

			//1.自定义类实现Runnable接口
			class MyThread1 implements Runnable
			{
			    //2.重写run方法
			    public void run()
			    {
			        //3.将要执行的代码写在run方法中
			        for (int x = 0 ;x < 1000;x++)
			        {
			            System.out.println("aaaaaaaaaaaaaaaaa");
			        }
			    }
			}
			
			public class TestThreadDemo2 {
			    public static void main(String[] args) {
			
			        //4.创建自定义类对象
			        MyThread1 t = new MyThread1();
			        //5.将其作为参数传递给Thread的构造函数
			        Thread a = new Thread(t);
			        a.start();//开启线程
			
			        for (int x= 0;x<3000;x++)
			        {
			            System.out.println("bb");
			        }
			    }
			}
			
	
**多线程(实现 Runnable 的原理)**

* 看 Thread 类的构造函数,传递了 Runnable 接口的引用
* 通过 init()方法找到传递的 target 给成员变量的 target 赋值
* 查看 run 方法,发现 run 方法中有判断,如果 target 不为 null 就会调用 Runnable 接口子类对象的 run 方法  

**多线程(两种方式的区别)**  

- 查看源码的区别:  

	* 继承 Thread : 由于子类重写了 Thread 类的 run(), 当调用 start()时, 直接找子类的 run()方法
	* 实现 Runnable : 构造函数中传入了 Runnable 的引用, 成员变量记住了它, start() 调用 run()方法时内部判断成员变量 Runnable 的引用是否为空, 不为空编译时看的是 Runnable 的run(),运行时执行的是子类的 run()方法  

**多线程(两种方式的优缺点)**  

- 继承 Thread  
  
	* 好处是:可以直接使用 Thread 类中的方法,代码简单 
	* 弊端是:如果已经有了父类,就不能用这种方法  
	
- 实现 Runnable 接口  

	* 好处是:即使自己定义的线程类有了父类也没关系,因为有了父类也可以实现接口,而且接口是可以多实现的
	* 弊端是:不能直接使用Thread中的方法需要先获取到线程对象后,才能得到Thread的方法,代码复杂  

**多线程(获取名字和设置名字)**  

* 获取名字
	* 通过 getName()方法获取线程对象的名字 

* 设置名字
	* 通过构造函数可以传入 String 类型的名字



  