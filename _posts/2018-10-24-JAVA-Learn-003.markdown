---
layout:     post
title:      "JAVA语法笔记---第三章"
subtitle:   "JAVA语法备查"
date:       2018-10-24
author:     "kikyoar"
header-img: "img/post-bg-Java-version.jpg"
tags:
    - JAVA
---  

## 第三章  

**逻辑运算符**   
 
![Keyword006.jpg](http://kikyoar.com/img/Keyword006.jpg)  

**基本用法**  

- 逻辑运算符一般用于连接 boolean 类型的表达式或者值  
- 表达式:就是用运算符把常量或者变量连接起来的符合 java 语法的式子  

	- 算术表达式:a + b
	- 比较表达式:a == b(条件表达式)   

特点:偶数个不改变本身   
**举个栗子**:  
用来连接 boolean 模式的表达式

- &(与): 3<x<5 应写成 x>3 & x>5  

		两边都是 true，结果是 true，否则都是 false 
		true & true = true ;
		true & false = false;
		false & true = false;
		false & false = false ;  

- \|(或): x<3 \| x>5

		两边都是 false，结果是 false，否则都是 true 
		true | true = true ;
		true | false = true;
		false | true = true;
		false | false = false ;		

- ^(异或):

		两边相同为 false，两边不同为 true 
		true ^ true = false ;
		true ^ false = true;
		false ^ true = true;
		false ^ false = false ;
- !(非):

		true = false;	  
		
**“&”和“&&”的区别:**	  

- 单&时，左边无论真假，右边都进行运算;   
- 双&时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算  

**“\|”和“\|\|”的区别同理，双或时，左边为真，右边不参与运算**  
**异或( ^ )与或( \|)的不同之处是:当左右都为 true 时，结果为 false**   

**位运算符**   

![Keyword007.jpg](http://kikyoar.com/img/Keyword007.jpg)  

- \<\<:就是将左边的操作数在内存中的二进制数据左移右边操作数指定的位数，右边被移空的部分补 0.相当于乘与 2 的倍数

- \>\>:右移稍微复杂一点，如果最高位是 0，左边被移空的位就填入 0;如果最高位是 1，左 边被移空的位就填入 1.相当于除以 2 的倍数
- \>\>\>:无论最高位是 1 还是 0，左边被移空的高位都填入 0  

**看结果:总结相当于乘以或者除以 2 的多少次幂**  
**1 为真 0 为假** 

- &:有 0 则 0，可以用来取二进制中的有效位 1  
- \|:有 1 位为 1，结果为 1  
- ^:相同则0，不同则1 ，a^b^b a异或b两次还是a  
- ~:按位取反 6取反~6+1=-6  

![Keyword008.jpg](http://kikyoar.com/img/Keyword008.jpg)  

**三元运算符**  

- 格式:(关系表达式)?表达式 1:表达式 2 如:z=(x>y)?x:y  
- 如果条件为 true，运算后的结果是表达式 1 如果条件为 false，运算后的结果是表达式 2 和 if else 的简写差不多  
   **一定要返回一个变量或者值，不能是其他语句**

**键盘录入的基本格式**	  

- 导入包: import java.util.Scanner;
- 在 main 函数中实例化对象: Scanner sc = new Scanner(System.in);  
接受用户输入:
 
	-  接收整数:int num = sc.nexInt();
	-  接收字符串:String str = sc.next();
	-  接收浮点值:double val = sc.nextDouble();  

在 Scanner 类中，有一些:hasNextXxxx()方法，这些方法可以先期判断是否能够获取一个 Xxxx 的值，如果可以，此方法返回 true，否则返回 false  

**流程控制语句**  

流程控制语句分类

- 顺序结构 
- 选择结构 
- 循环结构 

选择结构的分类 

- if 语句
- switch 语句  

**if 语句有几种格式**  

- 格式 1

		if(关系表达式);{ 
			语句体
		}  
	
	- 执行流程

		- 先计算比较表达式的值，看其返回值是 true 还是 false. 如果是 true，就执行语句体;如果是 false，就不执行语句体;

	- 选择结构 if 语句注意事项  
	
		- a:比较表达式无论简单还是复杂，结果必须是 boolean 类型
		- b:if 语句控制的语句体如果是一条语句，大括号可以省略;如果是多条语句，就不能省略. **建议永远不要省略**
		- c:一般来说:有左大括号就没有分号  

- 格式 2  

		if(关系表达式){
		    语句体
		         }
		else{
		   语句体 
		         }	  
		         		
	- 执行流程:

		- 首先计算比较表达式的值，看其返回值是 true 还是 false. 如果是 true，就执行语句体 1;如果是 false，就执行语句体 2;  

	**else 后面是没有比较表达式的，只有 if 后面有**  
	
	**if 语句的格式 2 和三元的相互转换问题**:

	*当 if 语句控制的语句体是一条输出语句的时候，就不成立.因为三元运算符是一个运算符，必须要求有一个结果返回.而输出语句却不能作为一个返回结果,在其他的时候三元运算符的操作都可以使用 if 语句改进*  
		
- 格式 3  

		if(关系表达式){ 
			语句体
		  				}
		else if(关系表达式){ 				
		   语句体      }
		    ...
		else{
		    }  
	
	- 执行流程:
		
		- 首先计算比较表达式 1 看其返回值是 true 还是 false，如果是 true，就执行语句体 			1，if 语句结束.如果是 false，接着计算比较表达式 2 看其返回值是 true 还是 			false，如果是true，就执行语句体 2，if 语句结束.如果是 false，接着计算比较			表达式 3 看其返回值是 true 还是 false，如果都是 false，就执行语句体 n+1   

	**最后一个 else 可以省略,但是建议不要省略,可以对范围外的错误值提示**   

**选择结构**  

- switch 语句格式   

		switch(变量){
		case 变量值1:
		    语句体;
		    break;
		case 变量值2:
		    语句体;
		    break;
		  ...
		case default:
		    语句体;
		    break;
		}  
		
- 格式解释  

	- switch 语句 
			
		- 表达式的取值:byte,short,int,char   
		- JDK5 以后可以是枚举  
		- JDK7 以后可以是 String  
	- case 后面跟的是要和表达式进行比较的值    
	- 语句体部分可以是一条或多条语句  
	- break 表示中断，结束的意思，可以结束 switch 语句  
	- default 语句表示所有情况都不匹配的时候，就执行该处的内容，和 if 语句的 else 相似  

- 执行流程

	- 首先计算出表达式的值，其次，和 case 依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到 break 就会结束.最后，如果所有的 case 都和表达式的值不匹配，就会执行 default 语句体部分，然后程序结束掉  

- 注意事项  

- "表达式"可以产生的值:byte,short,int,char,枚举(JDK5 以后),String(JDK7 以后)
- case 语句后跟"常量表达式"，不能是"变量";而且不能出现相同的常量值  
- break;语句"不是必须的".如果不写，如果一旦 case 相应的值成功，但内部没有 break 语句，那么将会无条件(不再进行 case 匹配)的继续向下执行其它 case 中的语句，直到遇到 break;语句或者到达 switch 语句结束  
- 多个 case 之间，没有顺序关系  
- default 语句"不是必须的".可以不写，它就相当于多重 if 语句中最后的 else  
- default 语句和 case 语句"没有顺序关系"	  

**选择结构 if 语句和 switch 语句的区别**:

- switch 建议判断固定值的时候用 
- if 建议判断区间或范围的时候用
                                          
	
                        
	

