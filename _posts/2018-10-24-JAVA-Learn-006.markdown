---
layout:     post
title:      "JAVA语法笔记---第六章"
subtitle:   "JAVA语法备查"
date:       2018-10-24
author:     "kikyoar"
header-img: "img/post-bg-Java-version.jpg"
tags:
    - Java
---   

## 第六章 

**面向过程**:面向过程开发，其实就是面向着具体的每一个步骤和过程，把每一个步骤
和过程完成，然后由这些功能方法相互调用，完成需求.面向过程的代表语言: c 语言

**面向对象思想概述**:面向对象是基于面向过程的编程思想  

**面向对象思想特点**:

- 是一种更符合我们思想习惯的思想 
- 可以将复杂的事情简单化 
- 将我们从执行者变成了指挥者(角色发生了转换)  

下面我们根据面向和面向过程的概念和特点各举个例子:  
 
- 面向过程:

   - 打开手机
   - 拨打电话 
   - 挂断电话  

*强调的是“打开手机”，“拨打电话”、“挂断电话”过程功能行为的重要性* 

- 面向对象:   

   - 手机打开了
   - 手机拨打电话
   - 手机关闭了  

*强调手机是一个对象一个整体，具有打开，拨打号码，关闭的功能*  

`面向对象开发`就是不断的创建对象，使用对象，指挥对象做事情  
`面向对象设计`其实就是在管理和维护对象之间的关系  
`面向对象特征`  

- 封装(encapsulation) 
- 继承(inheritance) 
- 多态(polymorphism)  

**类的定义**  

生活中描述事物无非就是描述事物的属性和行为

- 属性 人的身高，体重等
- 行为 人可以学习，吃饭等 

那我们**定义类其实就是定义类的成员(成员变量和成员方法)**  

- 成员变量就是事物的属性  
- 成员方法就是事物的行为  

**类与对象关系**  

- 类:是一组相关的属性和行为的集合，可以理解为构造对象的一个蓝图或者模版，是抽象的概念，比如:森林
- 对象:是该类事物的具体体现，是以类为模型创建的具体实例，是对类的一种具体化.比如:白桦树、松柏、梧桐  

**使用**:  

- A、创建对象并使用 格式:`类名 对象名 = new 类名();` 
- B、使用成员变量:对象名.变量名
- C、使用成员方法:对象名.方法名()  

**举个小栗子**:

	class Car
	{
	    //成员变量
	    int num;//车的轮子-------在内存中初始化的时候为0
	    String color;//车的颜色-------在内存中初始化的时候为null
	
	
	    //成员函数
	    void run()
	    {
	        System.out.println(num+"......."+color);
	    }
	}
	
	//定义类其实就是在定义类中的成员
	//成员：成员变量<---->属性，成员函数<----->行为；
	
	
	class CarDemo1 {
	    public static void main(String[] args) {
	        //在计算机中创建一个car的实例，通过new 关键字
	        Car c = new Car(); //c就是一个类类型的引用变量，指向了该类的对象
	        c.num = 4;
	        c.color = "red";
	        c.run();//要使用对象中的内容可以通过 对象.成员的形式来完成调用
	        show(c);
	    }
	
	
	
	//汽车改装厂
	public static void show(Car c)//类类型的变量一定指向对象，要不就是null
	{
	   c.num = 3;
	   c.color = "black";
	   System.out.println(c.num+"......"+c.color);
	}
	
	}   
	
**成员变量和局部变量的区别**:

- A、在类中的位置不同

	- 成员变量---类中方法外
	- 局部变量---方法内或者方法声明上  

- B、内存中的位置不同

	- 成员变量---堆内存
	- 局部变量---栈内存  

- C、生命周期不同  

	- 成员变量---随着对象的存在而存在，随着对象的消失而消失
	- 局部变量---随着方法的调用而存在，随着方法的调用完毕而消失  

- D、初始化值不同  

	- 成员变量---有默认的初始化值
	- 局部变量---没有默认的初始化值，必须先定义，赋值，才能使用  

**如果局部变量和成员变量的名称一致会才有就近原则，先找小范围，再找大范围.基本数据类型变量包 括:byte,short,int,long,float,double,boolean,char，引用数据类型变量包括:数组,类,接口,枚举**  

**方法的形式参数**  

一般情况下基本类型和引用类型都可以作为形式参数，基本类型就是值传递  

	class Student {  
		public void show() 
		{ 
		System.out.println("show");
		}
	}
	class StudentDemo {
	// 如果参数是一个类名，那么实际需要的是一个具体的对象
		public void method(Student s) 
		{ 
		s.show();
		}
	}
	
	public class StudentTest {
		public static void main(String[] args) {
			StudentDemo sd = new StudentDemo(); 
			Student s = new Student(); 
			sd.method(s);
			// 多个匿名对象的写法
			new StudentDemo().method(s);
	 	}
	}	 
	
例子中提到了匿名对象，那么匿名对象又是什么?  
简单来说匿名对象就是没有名字的对象是对象的一种简化表示形式  
**匿名对象的两种使用情况**:

- 对象调用方法仅仅一次的时候 
- 作为实际参数传递  

**封装的概述**  
封装是指隐藏对象的属性和实现细节，仅对外提供公共访问方式  
**封装好处**

- A、隐藏实现细节，提供公共的访问方式 
- B、提高了代码的复用性 
- C、提高安全性  

**封装原则**  

- A、将不需要对外提供的内容都隐藏起来
- B、把属性隐藏，提供公共方法对其访问  

**private 关键字的特点**
 
- A、是一个权限修饰符 
- B、可以修饰成员变量和成员方法 
- C、被其修饰的成员只能在本类中被访问  

**封装和 private 的应用**:

- A、把成员变量用 private 修饰
- B、提供对应的 getXxx()和 setXxx()方法  

**private 仅仅是封装的一种体现形式,不能说封装就是私有**  

	class Person
	{
	    private /*私有*/int age;
	    void speak()
	    {
	        System.out.println("age="+age);
	    }
	
	    public  void  judgmentage (int a)
	    {
	        if (a > 0 && a < 130)
	        {
	            age = a;
	        }
	        else {
	            System.out.println("错误的数据");
	        }
	    }
	 /*
	    public void setAge(int a)  --------数据类型基本上都是void
	    {
	        age = a;
	    }
	    public int getAge()  -----数据类型对应age的数据类型
	    {
	        return age;
	    }
	 */ //规范---有变量获取的情况下
	
	}
	
	
	public class PersonDemo {
	    public static void main(String[] args) {
	
	    Person p = new Person();
	    //p.age = 20 ;
	    p.judgmentage(30);
	    p.speak();
	    }
	}  
	
**this 关键字**  

代表所在类的对象引用，哪个对象调用了 this 所在的函数，this 就代表哪个对象  

**this 的应用场景**  

用来区分成员变量和局部变量重名，这个标识可以省略不写.但是，当局部变量和成员变量同名时，必须用 this.来标识成员变量




