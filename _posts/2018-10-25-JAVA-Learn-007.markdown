---
layout:     post
title:      "JAVA语法笔记---第七章"
subtitle:   "JAVA语法备查"
date:       2018-10-25
author:     "kikyoar"
header-img: "img/post-bg-Java-version.jpg"
tags:
    - Java
---   

## 第七章  

**构造方法**   

- 概念:给对象的数据(属性)进行初始化  
- 特点:

	- a.方法名与类同名(字母大小写也要一样)
	- b.没有返回值类型
	- c.没有具体的返回值 return  

- 构造方法重载:方法名相同，与返回值类型无关(因为构造方法没有返回值)，只看参数列表 

**如果没有写出构造方法，系统自动提供一个无参的构造方法，如果我们给出了构造方法，系统不再提供构造方法**

**举个小栗子**:

	class Person{
	    private String name;
	    private int age;
	
	    //定义一个Person类的构造函数
	    Person()//构造函数，而且是空参数的
	    {
	        name = "baby";
	        age = 1;
	        System.out.println("Person run");
	    }
	    //如果有的孩子一出生就有名字
	    Person(String n)
	    {
	        name = n ;
	    }
	
	    //如果有孩子一出生规定了名字和年龄
	    Person(String n ,int a)
	    {
	        name = n ;
	        age = a;
	
	    }
	
	    public  void speak()
	    {
	        System.out.println("name="+name+","+"age="+age);
	    }
	}
	
	//一个类中如果没有定义过构造函数，那么该类中会有一个默认的空参数构造函数
	//如果在类中定义了指定的构造函数，那么该类中的默认构造函数就没有了
	
	public class ConsDemo {
	    public static void main(String[] args) {
	
	    Person p = new Person();//构造函数：构建创造对象时调用的函数    作用：可以给对象进行初始化
	    //创建对象都必须通过构造函数初始化
	        p.speak();
	        Person p1 = new Person("旺财");
	        p1.speak();
	        Person p2 = new Person("哪吒", 3);
	        p2.speak();
	
	    }


**一般函数和构造函数的区别**：

- 构造函数：
	- `对象创建时，就会调用与之对应的构造函数，对对象进行初始化`
	- 对象创建时，会调用只调用一次
	- 首字母大写

- 一般函数：

	- `对象创建后，需要该函数功能时才调用`
	- 对象创建后，会被调用多次
	- 首字母小写  

**什么时候定义构造函数呢？**  
    
- 在描述事物时，该事物已存在就具备的一些内容，这些内容都定义在构造函数中  

**成员变量**  

- 赋值

	- A.通过 setxxx()方法 
	- B.通过构造方法 

**当成员变量和局部变量重名可以用关键字this来区分**  

   - this：代表对象，代表当前对象，this就是所在函数所属对象的引用  
           **哪个对象调用了this所在的函数，this就代表哪个对象**

**this也可以在构造函数中调用其他构造函数**  
**注意：只能定义在构造函数的第一行.因为初始化动作要先执行！**      

**举个小栗子**:

	class Student{
		private String name;
		private int age;
		//下面是构造方法
		public Student(String name,int age){ //构造方法赋值
			//this.name = name;
			//this.age = age;
			}
		public void setName(String name){ this.name = name;
			}
		public void setAge(int age){ this.age = age;
			}
	}   
	
**创建对象的步骤**  

Student s = new Student();

- Student.class 加载进内存
- 声明一个 Student 类型引用 s 
- 在堆内存创建对象,
- 给对象中属性默认初始化值
- 属性进行显示初始化
- 构造方法进栈,对对象中的属性赋值,构造方法弹栈
- 将对象的地址值赋值给 s  

**static 关键字**  

- 概念:static 用于修饰类的成员，如成员变量，成员方法，代码块，被 static 修饰的成员具备一些特殊性  
	
	- 随着类的加载而加载
	- 优先于对象存在
	- 可以通过类名调用  
	**其实它本身也可以通过对象名调用.推荐使用类名调用. 静态修饰的内容一般我们称其为:与类相关的，类成员**
	- 被类的所有对象共享
		**举例**:

		- 饮水机(用静态修饰) 
		- 水杯(不能用静态修饰) 
		- 共性用静态,特性用非静态    

	**如果某个成员变量是被所有对象共享的，那么它就应该定义为静态的**  
	
- 注意事项  

	- `在静态方法中是没有 this 关键字的`  
		如何理解呢?  
		**静态是随着类的加载而加载，this 是随着对象的创建而存在**  
       **静态比对象先存在**  
       
   - `静态方法只能访问静态的成员变量和静态的成员方法`
	
       - 静态方法:
          - 成员变量:只能访问静态变量
          - 成员方法:只能访问静态成员方法
       - 非静态方法:
          - 成员变量:可以是静态的，也可以是非静态的
          - 成员方法:可是是静态的成员方法，也可以是非静态的成员方法
      
      **静态只能访问静态**   
      
**举个小栗子**:

	class Person3
	{
	    private String name;//成员变量、实例变量
	    static String country="CN";//静态变量、类变量
	
	    public void show()
	    {
	        System.out.println("country:"+country+"，"+"name："+name);
	    }
	
	
	    Person3(String name)
	    {
	        this.name = name;
	    }
	}
	
	public class StaticDemo {
	    public static void main(String[] args) {
	
	    Person3 p = new Person3("yuhao");
	    p.show();
	    System.out.println(Person3.country);//可以被类直接调用
	    }
	}     
	
	
 **静态变量和成员变量的区别**  

- 所属不同
	* 静态变量属于类，所以也称为为类变量
	* 成员变量属于对象，所以也称为实例变量(对象变量) 

- 内存中位置不同
	
	* 静态变量存储于方法区的静态区
	* 成员变量存储于堆内存  

- 内存出现时间不同

	* 静态变量随着类的加载而加载，随着类的消失而消失
	* 成员变量随着对象的创建而存在，随着对象的消失而消失  

- 调用不同

	* 静态变量可以通过类名调用，也可以通过对象调用 
	* 成员变量只能通过对象名调用  

**main 方法的格式详细解释**  

- 格式
	
	* public static void main(String[] args) {}

- 针对格式的解释
	
	* public 被 jvm 调用，访问权限足够大
	* static 被 jvm 调用，不用创建对象，直接类名访问
	* void 被 jvm 调用，不需要给 jvm 返回值
	* main 一个通用的名称，虽然不是关键字，但是被 jvm 识别 * String[] args 以前用于接收键盘录入的   

**Math 类**  

- 概念:类包含用于执行基本数学运算的方法
- 获取随机数的方法:

	- public static double random():返回带正号的 double 值，该值大于等于 0.0 且小于 1.0








