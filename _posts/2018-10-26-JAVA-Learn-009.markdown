---
layout:     post
title:      "JAVA语法笔记---第九章"
subtitle:   "JAVA语法备查"
date:       2018-10-26
author:     "kikyoar"
header-img: "img/post-bg-Java-version.jpg"
tags:
    - Java
--- 

## 第九章  

**面向对象之多态**  

- 多态(polymorphic)概述:事物存在的多种形态 
- 体现:父类的引用或者接口的引用指向了自己的子类对象
- 多态前提:  

	* 要有继承关系
	* 要有方法重写.
	* 要有父类引用指向子类对象  

**举个小栗子**:

	abstract class Animal
	{
	    abstract void eat();
	}
	
	class dog extends Animal
	{
	    void eat()
	    {
	        System.out.println("啃骨头");
	    }
	    void lookhome()
	    {
	        System.out.println("看家");
	    }
	}
	
	class cat extends Animal
	{
	    void eat()
	    {
	        System.out.println("吃鱼");
	    }
	    void catchmouse()
	    {
	        System.out.println("抓老鼠");
	    }
	}
	
	public class DuoTaiDemo {
	    public static void main(String[] args) {
	
	       // cat m = new cat();
	        method(new cat());
	        Animal c = new cat();//自动类型提升，猫对象提升了动物类型
	                                //作用就是限制对特有功能的访问
	                                //专业讲，向上转型
	
	        //如果还想用具体动物猫的特有功能，可以将对象进行向下转型
	        //向下转型的目的是为了使用子类中的特有方法
	        cat m = (cat)c;
	        m.catchmouse();
	        m.eat();
	        //((cat) c).catchmouse();
	        /*
	
	        注意：对于转型，自始至终都是子类对象在做着类型的变化
	        Animal c1 =new dog();
	        cat c2 = (cat)c1;
	        c2.eat();//ClassCastException 转换异常
	        */
	    }
	
	public  static void method(Animal a)
	{
	    a.eat();
	}  
	
**运行结果**:  

	吃鱼
	抓老鼠
	吃鱼  
	
**多态中的成员访问特点**  

- 成员变量  

    - 编译时：参考引用型变量所属的类中是否有调用的成员变量，有，编译通过；没有，编译失败
    - 运行时：参考引用型变量所属的类中是否有调用的成员变量，并运行该所属类中的成员变量
    - 简单说：**`编译和运行都参考等号的左边`**

- 成员函数（非静态）
    
    - 编译时：参考引用型变量所属的类中是否有调用的函数，有，编译通过；没有，编译失败
    - 运行时：参考引用型变量所属的类中是否有调用的函数
    - 简单说：**`编译看左边，运行看右边`**

- 静态函数  

    - 编译时：参考引用型变量所属的类中是否有调用的静态方法
    - 运行时：参考引用型变量所属的类中是否有调用的静态方法
    - 简单说：**`编译和运行都参考等号的左边`**

    **其实对于静态方法，是不需要对象的，直接用类名调用即可**   
    
**【结论】**  
  
   - **`对于成员变量和静态函数，编译和运行都看左边`**
   - **`对于成员函数，编译看左边，运行看右边`**  

**举个小栗子**:

	class Fu4
	{
	    int num = 10;
	    public void show()
	    {
	        System.out.println("fu show"+num);
	    }
	}
	
	class Zi4 extends Fu4
	{
	    int num = 40;
	    int m = 30;
	    public void show()
	    {
	        System.out.println("zi show"+num);
	    }
	    public void method()
	    {
	        System.out.println("zi method");
	    }
	}
	
	
	public class DuoTai4Demo {
	    public static void main(String[] args) {
	        Fu4 f = new Zi4();
	        //f.method():成员方法编译看左边，父类中没有，所以编译失败
	        f.show();//运行看右边
	        //int sum = f.m;成员变量编译和运行都看等号的左边，父类中没有编译失败
	        int sum1 = f.num;
	        System.out.println(sum1);//成员变量编译和运行都看等号的左边，所以是父类中的成员变量
	    }
	} 

**运行结果**: 
	
	zi show40
	10	
 
**抽象函数**  

- 抽象类概述:
	
	- 抽象就是看不懂的，需要 `abstract` 修饰

- 抽象类特点:  
	
	- 抽象类和抽象方法必须用 abstract 关键字修饰

			abstract class 类名 {}
			public abstract void eat();  
			
	- 抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或者是接口  
	- 抽象类不能实例化，那么可以按照多态的方式，由具体的子类实例化.其实这也是多态的一种，抽象类多态  
	- 抽象类的子类要么是抽象类，要么重写抽象类中的所有抽象方法  

			abstract class People //extends Object {  
				abstract void work();//抽象函数.需要 abstract 修饰，并分号;结束 
				}  
				
- 抽象类的成员特点：  

- 成员变量:既可以是变量，也可以是常量  - 构造方法:抽象类是一个类，所以，它有构造方法，用于子类访问父类数据的初始化
- 成员方法:既可以是抽象的，也可以是非抽象的  

		abstract class People {
		 		public People() 
		 		{ //构造方法
				}
				String name = "小明";// 变量 
				final int GENDE = 1;// 常量,字母要大写
				abstract void work();// 抽象方法
				public void sleep() {
					// 非抽象方法 
					System.out.println("睡觉.....");
				}
			}  
			
- 抽象类的成员方法特性:  
	
	- 抽象方法: 强制要求子类做的事情
	- 非抽象方法: 子类继承的事情，提高代码复用性  

			abstract class 犬科
			{
			    abstract void 吼叫();
			}
			
			
			class 狗 extends 犬科
			{
			    void 吼叫()
			    {
			        System.out.println("汪汪");
			    }
			}
			
			class 狼 extends 犬科
			{
			    void 吼叫()
			    {
			        System.out.println("嗷嗷");
			    }
			}
			
			public class AbstractDemo {
			    public static void main(String[] args) {
			        
			
			    }
			}  
			
**抽象类和一般类的异同点**:

- 相同:
	
	- 它们都是用来描述事物的
	- 它们之中都可以定义属性和行为 

- 不同:
	
	- 一般类可以具体的描述事物.抽象类描述事物的信息不具体
	- 抽象类中可以多定义一个成员:抽象函数
	- 一般类可以创建对象，而抽象类不能创建对象.抽象类中是可以不定义抽象方法，不让该类创建对象，不让别的类建立该抽象类对象

**抽象关键字 abstract 不可以和 final，private，static 共存**

- private:私有内容子类继承不到，所以不能重写,但是 abstract 修饰的方法，要求被重写.两者冲突. 
- final:final 修饰的方法不能被重写,而 abstract 修饰的方法，要求被重写.两者冲突     
- static:假如一个抽象方法能通过 static 修饰，那么这个方法，就可以直接通过类名调用.而抽象方法是没有方法体的，这样的调用无意义.所以不能用 static 修饰  

**接口**  

- 接口概述:

	- 从狭义的角度讲就是指 java 中的 interface 
	- 从广义的角度讲对外提供规则的都是接口  

- 接口特点:

- 接口用关键字 interface 表示
	
		interface 接口名 {} 

- 类实现接口用 implements 表示

		class 类名 implements 接口名 {}

- 接口不能实例化  

	- 可以按照多态的方式来实例化

- 接口的子类

	- 可以是抽象类.但是意义不大. 
	- 可以是具体类.要重写接口中的所有抽象方法(推荐方案)  

			interface A
			{
			    public abstract void show();
			}
			interface B
			{
			    public abstract void show();
			}
			
			interface C extends A,B  //接口与接口之间是继承关系，并且可以多继承
			{
			
			}
			
			class interfaceimpl implements A,B  //多实现
			{
			    public void show()
			    {
			
			    }
			}
			
			
			/*
			一个类在继承另一个类的同时，还可以实现多个接口
			 */
			//接口的出现避免了单继承的局限性
			
			class Q
			{
			    public void method()
			    {
			
			    }
			}
			
			class Test extends Q implements A,B
			{
			    public void show()
			    {
			
			    }
			}  
			
- 接口的成员特点  

	 - 成员变量;只能是常量，并且是静态的并公共的. 默认修饰符:public static final
	 - 构造方法:接口没有构造方法
	 - 成员方法:只能是抽象方法.默认修饰符:public abstract  

- 类与类,类与接口,接口与接口的关系  

	- 类与类:
		- 继承关系,只能单继承,可以多层继承.
	- 类与接口:
		- 实现关系,可以单实现,也可以多实现.并且还可以在继承一个类的同时实现多个接口  
		- 接口与接口:继承关系,可以单继承,也可以多继承  

- 抽象类和接口的区别  

	- 成员区别
	
		- 抽象类:
		  
		  - 成员变量:可以变量，也可以常量
		  - 构造方法:有
		  - 成员方法:可以抽象，也可以非抽象
		
		- 接口:
		  
		  - 成员变量:只可以常量
		  - 成员方法:只可以抽象  

	- 关系区别:

		- 类与类之间有继承关系，可以单继承不能多继承 
		- 类与接口之间有实现关系，可以单实现或者多实现 
		- 接口与接口之间有继承关系，可以单继承也可以多继承  

	- 设计理念区别:

		- 抽象类 被继承体现的是:”is a”的关系.抽象类中定义的是该继承体系的共性功能
		- 接口 被实现体现的是:”like a”的关系.接口中定义的是该继承体系的扩展功能  

				abstract class 犬
				{
				    abstract void 吼叫();
				}
				
				interface 导盲
				{
				    public abstract void 导盲();
				}
				
				class 导盲犬 extends 犬 implements 导盲
				{
				    public void 吼叫()
				    {
				
				    }
				    public void 导盲()
				    {
				
				    }
				}
				
				public class InterfaceDemo2 {
				    public static void main(String[] args) {
				
				
				    }
				}
			
   
 
 

